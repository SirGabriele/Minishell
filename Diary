Gerer les redirections si TOK NULL ou TOK PIPE

cat
infile_mode = TOK_NULL -> pas de dup2
outfile_mode = TOK_NULL -> pas de dup2

cat | ls
infile_mode = TOK_NULL -> pas de dup2
outfile_mode = TOK_PIPE -> dup2(pipes->after[1], 1);

		OK

-------------------------------------------------------------

valeur de retour == return value de execve ON SUCCESS
				== return value de exit() si execve fail

1 ->	infile non existant OK
		permission denied (pas le droit de read ou tentative d'ecrire dans un fichier readonly) OK
		mauvaise option avec un non built in
		argument de commande non existant
		lecture d'un directory OK

2 ->	mauvaise option avec un built in OK
		utilisation d'une commande exigeant un argument, mais n'en ayant pas OK

126 ->	command not executable


127 -> command not found (wrong path)

255 ->	invalid/out of range value in exit()

------------------------------------------------------------

ajouter les codes d'erreurs des signaux

------------------------------------------------------------

echo $_

-------------------------------------------------------------

Voir dans

	parse_quotes.c
		l62
	
	get_pipeline_infos.c
		l9
	
	diff get_first_half et get_second_half
	
	commentaires Ã  finir dans binary_tree_utils.c
	
------------------------------------------------------------

les checks genre <>, | >, < |, | &&
ne pas expand les infile, outfile, delimiter. echo << $PATH attend '$PATH' en delimiter
erreur de check ferme minishell
comportement binary_tree avec (echo dsa)
